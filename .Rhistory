main = 'Zinc',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0,2800))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Zn[1],
NEU$Konz_Zn[1],
EFH$Konz_Zn[1],
GEW$Konz_Zn[1])),
col= c('red', 'green','blue','orange' ),lwd = 1, lty = 2)
legend(x= 0.5 , y=2800,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty=2)
#Copper
Cu$plotOrder <- plyr::mapvalues(Cu$source,
from = c('facade','roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Cu,
main = 'Copper',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0,800))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Cu[1],
NEU$Konz_Cu[1],
EFH$Konz_Cu[1],
GEW$Konz_Cu[1])),
col= c('red', 'green','blue','orange' ), lwd = 1, lty = 2)
legend(x= 0.5 , y=800,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty=2)
#Copper
Cu$plotOrder <- plyr::mapvalues(Cu$source,
from = c('facade','roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Cu,
main = 'Copper',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0,1800))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Cu[1],
NEU$Konz_Cu[1],
EFH$Konz_Cu[1],
GEW$Konz_Cu[1])),
col= c('red', 'green','blue','orange' ), lwd = 1, lty = 2)
legend(x= 0.5 , y=800,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty=2)
#Copper
Cu$plotOrder <- plyr::mapvalues(Cu$source,
from = c('facade','roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Cu,
main = 'Copper',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0,11800))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Cu[1],
NEU$Konz_Cu[1],
EFH$Konz_Cu[1],
GEW$Konz_Cu[1])),
col= c('red', 'green','blue','orange' ), lwd = 1, lty = 2)
legend(x= 0.5 , y=800,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty=2)
Cu$plotOrder <- plyr::mapvalues(Cu$source,
from = c('facade','roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Cu,
main = 'Copper',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0,80))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Cu[1],
NEU$Konz_Cu[1],
EFH$Konz_Cu[1],
GEW$Konz_Cu[1])),
col= c('red', 'green','blue','orange' ), lwd = 1, lty = 2)
legend(x= 0.5 , y=800,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty=2)
#Copper
Cu$plotOrder <- plyr::mapvalues(Cu$source,
from = c('facade','roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Cu,
main = 'Copper',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0,800))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Cu[1],
NEU$Konz_Cu[1],
EFH$Konz_Cu[1],
GEW$Konz_Cu[1])),
col= c('red', 'green','blue','orange' ), lwd = 1, lty = 2)
legend(x= 0.5 , y=800,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty=2)
#Diuron
Diuron_without_bbr$plotOrder <- plyr::mapvalues(Diuron_without_bbr$source,
from = c('facade','roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Diuron_without_bbr,
main = 'Diuron',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0, 2000))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Diuron[6],
NEU$Konz_Diuron[6],
EFH$Konz_Diuron[6],
GEW$Konz_Diuron[6])),
col = c('red', 'green','blue','orange' ),lwd = 1, lty = 2)
legend(x= 3.85 , y = 2000,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty = 2)
#Diuron
Diuron_without_bbr$plotOrder <- plyr::mapvalues(Diuron_without_bbr$source,
from = c('facade','roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Diuron_without_bbr,
main = 'Diuron',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0, 2000))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Diuron[6],
NEU$Konz_Diuron[6],
EFH$Konz_Diuron[6],
GEW$Konz_Diuron[6])),
col = c('red', 'green','blue','orange' ),lwd = 1, lty = 2)
legend(x= 3.5 , y = 2000,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'), lty = 2)
#Mecoprop
Mecoprop_without_bbr$plotOrder <- plyr::mapvalues(Mecoprop_without_bbr$source,
from = c('facade', 'roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Mecoprop_without_bbr,
main = 'Mecoprop',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0, 500))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Mecoprop[1],
NEU$Konz_Mecoprop[1],
EFH$Konz_Mecoprop[1],
GEW$Konz_Mecoprop[1])),
col = c('red', 'green','blue','orange' ), lwd = 1, lty = 2)
legend(x= 0.5 , y = 500,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'),lty = 2)
#Mecoprop zoomed in
Mecoprop_without_bbr$plotOrder <- plyr::mapvalues(Mecoprop_without_bbr$source,
from = c('facade', 'roof', 'facade+roof', 'storm_sewer'),
to = c(1, 2, 4, 3))
boxplot(concentration ~ plotOrder,
data = Mecoprop_without_bbr,
main = 'Mecoprop',
xlab = NA , ylab = 'concentration [μg/L]',
outline= FALSE,
xaxt = 'n',
ylim = c(0, 60))
axis(side = 1,
at = 1:4,
labels = c('BaSaR\nfacade',
'BaSaR\nroof\n1 year old',
'BaSaR\nstorm sewer',
'SpuR\nfacade+roof\nnew'),
padj = 0.75)
abline(h = (1000*c(ALT$Konz_Mecoprop[1],
NEU$Konz_Mecoprop[1],
EFH$Konz_Mecoprop[1],
GEW$Konz_Mecoprop[1])),
col = c('red', 'green','blue','orange' ), lwd = 1, lty = 2)
legend(x= 0.5 , y = 60,
legend = c('ALT', 'NEU', 'EFH', 'GEW'),
col = c('red','green','blue','orange'),lty = 2)
OgRe_types <- c("ALT", "EFH", "GEW", "NEU")
substances <- c('Diuron', 'Mecoprop', 'Terbutryn', 'Benzothiazol', 'Zn', 'Cu')
sources <- c("Bitumendach", "Ziegeldach", "Dach_weitere", "Strasse", "Hof", "Putzfassade")
for (substance in substances) {
#substanz auswählen
for (OgRe_typ in OgRe_types) {
#Zeilen auswählen die OgRe_typ entsprechen
for (my_source in sources) {
c_current <- eval(parse(text = paste0("Konz_", OgRe_typ)))
col_Konz <- which(names(c_current) == paste0("Konz_", substance))
row_Konz <- which(c_current$Source == my_source)
concentration <- c_current[row_Konz, col_Konz]
row_runoff <- which(BTF_input$OgRe_Type == OgRe_typ)
index_source <- which(sources$KLAR == my_source)
col_runoff <- which(names(BTF_input) == paste0("runoff_", sources$abbrev[index_source]))
col_output <- which(names(substance_output) == paste0("load_", sources$KLAR[index_source]))
substance_output[row_runoff, col_output] <- concentration * BTF_input[row_runoff, col_runoff]
#Quelle auswählen (im entsprechenden c_ File (1 Zelle) und Abflussfile (1 Spalte))
#multiplizieren
}
}
#Ergebnis einm neuen data.frame zuweisen
assign(paste0(substance, "_output"), substance_output)
}
library(data.table)
#directory for output data
write.dir <- "data_output/"
# 1. read input tables --------------------------------------------------------------------
# abimo runoff and OgRe information (roof, yard, street (last two include facade runoff))
BTF_input <- foreign::read.dbf('data/berlin_runoff.dbf')
setnames(BTF_input, old=c('runoff_str', 'runoff_yar', 'runoff_bit', 'runoff_zie', 'runoff_res', 'runoff_put'), new= c('runoff_Strasse','runoff_Hof','runoff_Bitumendach','runoff_Ziegeldach','runoff_Dach_weitere','runoff_Putzfassade'))
# backcalculated concentrations from OgRe
c_NEU <- read.csv(file = 'data/Konz_NEU.csv', sep = ';')
c_ALT <- read.csv(file = 'data/Konz_ALT.csv', sep = ';')
c_GEW <- read.csv(file = 'data/Konz_GEW.csv', sep = ';')
c_EFH <- read.csv(file = 'data/Konz_EFH.csv', sep = ';')
conc_OgRe <- list(c_NEU, c_ALT, c_GEW, c_EFH)
# measurements from BaSaR
BBRf <- read.csv(file = 'data_prelim_sources/BBRf_20200518_conc.txt', sep = ';')
BBRr <- read.csv(file = 'data_prelim_sources/BBRr_20200518_conc.txt', sep = ';')
BBRs <- read.csv(file = 'data_prelim_sources/BBRs_20200518_conc.txt', sep = ';')
BBWf <- read.csv(file = 'data_prelim_sources/BBWf_20200518_conc.txt', sep = ';')
BBWr <- read.csv(file = 'data_prelim_sources/BBWr_20200518_conc.txt', sep = ';')
BBWs <- read.csv(file = 'data_prelim_sources/BBWs_20200518_conc.txt', sep = ';')
conc_BaSaR <- list(BBRf, BBRr, BBRs, BBWf, BBWr, BBWs)
# literature data mining?
# field data OST (M. Burkhardt?)
# 1.1 define anchor for distributions
# 2. build distributions for concentrations ----------------------------------------------
# get facade diuron, backcalculated from OgRe
#Müsste nach unseren neuen Erkenntnissen Terbutryn nicht aus Dach und Fassade stammen?
# get facade terbutryn, backcalculated from OgRe
# get roof mecoprop, backcalculated from OgRe
#benzothiazol kommt vor allem aus dem Straßenablauf wird das beachtet?
# get roof benzothiazol, backcalculated from OgRe
# get roof zinc, backcalculated from OgRe
#kupfer kommt vor allem aus dem Straßenablauf wird das beachtet?
# get roof copper, backcalculated from OgRe
# BaSaR...
substances <- c('Diuron', 'Mecoprop', 'Terbutryn', 'Benzothiazol', 'Zn', 'Cu')
locations <- c('BBRf', 'BBRr', 'BBRs', 'BBWf', 'BBWr', 'BBWs')
for (i in 1:length(substances)){
for (j in 1:length(locations)){
print(paste(paste(substances[i], locations[j],sep = "_"), '<-', paste('conc_BaSaR$', locations[j], '_20200518_conc.csv$', substances[i], sep = "")))
}
}
Diuron_BBRf <- conc_BaSaR$BBRf_20200518_conc.csv$Diuron
Diuron_BBRr <- conc_BaSaR$BBRr_20200518_conc.csv$Diuron
DiurOn_BBRs <- conc_BaSaR$BBRs_20200518_conc.csv$Diuron
Diuron_BBWf <- conc_BaSaR$BBWf_20200518_conc.csv$Diuron
Diuron_BBWr <- conc_BaSaR$BBWr_20200518_conc.csv$Diuron
Diuron_BBWs <- conc_BaSaR$BBWs_20200518_conc.csv$Diuron
# other sources of concentration data
# put all together and make random draw from distribution
# random draw from [lognormal?] distribution with observed mean and sd
# mecoprop_normal <- rlnorm(n = 1,
#                           meanlog = mean(log(mecoprop)),
#                           sdlog = sd(log(mecoprop)))
# mecoprop_reduced <- coeff_reduction_mecoprop * mecoprop_normal
# diuron_normal <- ...
# diuron_reduced <- ...
# ...(other substances)
# conc_yard_rest (?)
# conc_street_rest (OgRe STR)
# 3. emissions status quo ---------------------------------------------------------------
substance_output <- data.frame("ID" = BTF_input$CODE,
"Gewässser" = BTF_input$AGEB1,
"OgRe_Typ" = BTF_input$OgRe_Type,
"load_Bitumendach" = NA,
"load_Ziegeldach" = NA,
"load_Dach_andere" = NA,
"load_Straße" = NA,
"load_Hof" = NA,
"load_Putzfassade" = NA)
#for(substance in substances){
#a <-paste(substance, 'output', sep = '_')
#a <- data.frame("ID" = BTF_input$CODE,
#                                         "Gewässser" = BTF_input$AGEB1,
#                                          "OgRe_Typ" = BTF_input$OgRe_Type,
#                               "load_Bitumendach" = NA,
#                               "load_Ziegeldach" = NA,
#                               "load_Dach_andere" = NA,
#                               "load_Straße" = NA,
#                               "load_Hof" = NA,
#                               "load_Putzfassade" = NA)
#}
for (substance in substances){
paste(substance,'output', sep= '_')
print(paste(substance,'output', sep= '_'))
}
#prepare output tables status quo
for (substance in substances){
paste(substance,'output', sep= '_') <- data.frame("ID" = BTF_input$CODE,
"Gewässser" = BTF_input$AGEB1,
"OgRe_Typ" = BTF_input$OgRe_Type,
"load_Bitumendach" = NA,
"load_Ziegeldach" = NA,
"load_Dach_andere" = NA,
"load_Straße" = NA,
"load_Hof" = NA,
"load_Putzfassade" = NA)
print(paste(substance,'output', sep= '_'))
}
print(paste(substance,'output', sep= '_'))
<- data.frame("ID" = BTF_input$CODE,
"Gewässser" = BTF_input$AGEB1,
"OgRe_Typ" = BTF_input$OgRe_Type,
"load_Bitumendach" = NA,
"load_Ziegeldach" = NA,
"load_Dach_andere" = NA,
"load_Straße" = NA,
"load_Hof" = NA,
"load_Putzfassade" = NA)
print(paste(substance,'output', sep= '_')
#      load_blockteilfläche = load_roof + load_street + load_yard
#      load_roof = vol_roof * mecoprop_normal
#      load_street = load_facade + load_street_rest
#      load_yard = load_facade + load_yard_rest
#      load_facade = vol_facade * diuron_normal
#      load_street_rest = vol_street_rest * conc_street_rest
#      load_yard_rest = vol_yard_rest * conc_yard_rest
#      load_tileroof
#      load_bitumenroof
#      load_greenroof
#      ...(other sources)
# 4. reduced emissions (measures) -----------------------------------------------------
# 4.1 vary reduction parameters
# coeff_reduction_mecoprop <- random draw from distribution
# same for other parameters and measures
# for each substance:
# load_facade = load_facade_reduced + load_facade_normal
# load_roof = load_roof_reduced + load_roof_normal
# effect of low-emission paint/other materials (roof tiles, bitumen membrane, etc.):
# load_facade_reduced =
#    vol_facade * percent_facade_painted * conc_facade_reduced +
#    vol_facade * (1 - percent_facade_painted) * conc_facade
# same for roof
# effect of filter:
# load_blockteilfläche = load_filtered + load_unfiltered
# load_unfiltered_mecoprop_bitumenroof = (1 - %filtered_vol_bitumenroof)*load_bitumenroof
# load_filtered_mecoprop_bitumenroof = %filtered_vol_bitumenroof*coeff_filter_mecoprop*load_bitumenroof
# reduction factors for filter from SpuR data
# substances / sources
# geographic distribution of filters
OgRe_types <- c("ALT", "EFH", "GEW", "NEU")
substances <- c('Diuron', 'Mecoprop', 'Terbutryn', 'Benzothiazol', 'Zn', 'Cu')
sources <- c("Bitumendach", "Ziegeldach", "Dach_weitere", "Strasse", "Hof", "Putzfassade")
for (substance in substances) {
#substanz auswählen
for (OgRe_typ in OgRe_types) {
#Zeilen auswählen die OgRe_typ entsprechen
for (my_source in sources) {
c_current <- eval(parse(text = paste0("c_", OgRe_typ)))
col_Konz <- which(names(c_current) == paste0("Konz_", substance))
row_Konz <- which(c_current$Source == my_source)
concentration <- c_current[row_Konz, col_Konz]
row_runoff <- which(BTF_input$OgRe_Type == OgRe_typ)
index_source <- which(sources$KLAR == my_source)
col_runoff <- which(names(BTF_input) == paste0("runoff_", sources$abbrev[index_source]))
col_output <- which(names(substance_output) == paste0("load_", sources$KLAR[index_source]))
substance_output[row_runoff, col_output] <- concentration * BTF_input[row_runoff, col_runoff]
#Quelle auswählen (im entsprechenden c_ File (1 Zelle) und Abflussfile (1 Spalte))
#multiplizieren
}
}
#Ergebnis einm neuen data.frame zuweisen
assign(paste0(substance, "_output"), substance_output)
}
View(substance_output)
sources <- c("Bitumendach", "Ziegeldach", "Dach_weitere", "Strasse", "Hof", "Putzfassade")
OgRe_types <- c("ALT", "EFH", "GEW", "NEU")
substances <- c('Diuron', 'Mecoprop', 'Terbutryn', 'Benzothiazol', 'Zn', 'Cu')
sources <- c("Bitumendach", "Ziegeldach", "Dach_weitere", "Strasse", "Hof", "Putzfassade")
for (substance in substances) {
#substanz auswählen
for (OgRe_typ in OgRe_types) {
#Zeilen auswählen die OgRe_typ entsprechen
for (my_source in sources) {
c_current <- eval(parse(text = paste0("c_", OgRe_typ)))
col_Konz <- which(names(c_current) == paste0("Konz_", substance))
row_Konz <- which(c_current$Source == my_source)
concentration <- c_current[row_Konz, col_Konz]
row_runoff <- which(BTF_input$OgRe_Type == OgRe_typ)
index_source <- which(sources$KLAR == my_source)
col_runoff <- which(names(BTF_input) == paste0("runoff_", sources))
OgRe_types <- c("ALT", "EFH", "GEW", "NEU")
substances <- c('Diuron', 'Mecoprop', 'Terbutryn', 'Benzothiazol', 'Zn', 'Cu')
sources <- c("Bitumendach", "Ziegeldach", "Dach_weitere", "Strasse", "Hof", "Putzfassade")
for (substance in substances) {
#substanz auswählen
for (OgRe_typ in OgRe_types) {
#Zeilen auswählen die OgRe_typ entsprechen
for (my_source in sources) {
c_current <- eval(parse(text = paste0("c_", OgRe_typ)))
col_Konz <- which(names(c_current) == paste0("Konz_", substance))
row_Konz <- which(c_current$Source == my_source)
concentration <- c_current[row_Konz, col_Konz]
row_runoff <- which(BTF_input$OgRe_Type == OgRe_typ)
index_source <- which(sources$KLAR == my_source)
col_runoff <- which(names(BTF_input) == paste0("runoff_", sources))
col_output <- which(names(substance_output) == paste0("load_", sources$KLAR[index_source]))
substance_output[row_runoff, col_output] <- concentration * BTF_input[row_runoff, col_runoff]
#Quelle auswählen (im entsprechenden c_ File (1 Zelle) und Abflussfile (1 Spalte))
#multiplizieren
}
}
#Ergebnis einm neuen data.frame zuweisen
assign(paste0(substance, "_output"), substance_output)
}
OgRe_types <- c("ALT", "EFH", "GEW", "NEU")
substances <- c('Diuron', 'Mecoprop', 'Terbutryn', 'Benzothiazol', 'Zn', 'Cu')
sources <- c("Bitumendach", "Ziegeldach", "Dach_weitere", "Strasse", "Hof", "Putzfassade")
for (substance in substances) {
#substanz auswählen
for (OgRe_typ in OgRe_types) {
#Zeilen auswählen die OgRe_typ entsprechen
for (my_source in sources) {
c_current <- eval(parse(text = paste0("c_", OgRe_typ)))
col_Konz <- which(names(c_current) == paste0("Konz_", substance))
row_Konz <- which(c_current$Source == my_source)
concentration <- c_current[row_Konz, col_Konz]
row_runoff <- which(BTF_input$OgRe_Type == OgRe_typ)
index_source <- which(sources$KLAR == my_source)
col_runoff <- which(names(BTF_input) == paste0("runoff_", sources))
col_output <- which(names(substance_output) == paste0("load_", sources))
substance_output[row_runoff, col_output] <- concentration * BTF_input[row_runoff, col_runoff]
#Quelle auswählen (im entsprechenden c_ File (1 Zelle) und Abflussfile (1 Spalte))
#multiplizieren
}
}
View(conc_OgRe)
View(substance_output)
View(substance_output)
c_ALT <- read.csv(file = 'data/Konz_ALT.csv', sep = ';')
BTF_input <- foreign::read.dbf('data/berlin_runoff.dbf')
setnames(BTF_input, old=c('runoff_str', 'runoff_yar', 'runoff_bit', 'runoff_zie', 'runoff_res', 'runoff_put'), new= c('runoff_Strasse','runoff_Hof','runoff_Bitumendach','runoff_Ziegeldach','runoff_Dach_weitere','runoff_Putzfassade'))
w
2+2
library(data.table)
